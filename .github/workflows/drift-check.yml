name: Drift Check
on:
  schedule: [ { cron: "0 6 * * *" } ]
  workflow_dispatch:
jobs:
  drift:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - name: Install deps
        run: python -m pip install --upgrade pip && pip install requests beautifulsoup4 lxml
      - name: Run drift check
        id: run
        run: |
          python - <<'PY'
import json, pathlib, sys, time, requests
from bs4 import BeautifulSoup
base = json.loads(pathlib.Path(".scraper/baseline.json").read_text(encoding="utf-8"))
breaches=[]
report=[]
for t in base.get("targets",[]):
    url = t["url"]
    try:
        r = requests.get(url, timeout=20, headers={"User-Agent":"DriftCheck/1.0"})
        soup = BeautifulSoup(r.text, "lxml")
        for c in t.get("checks",[]):
            sel = c["css"]; expected = int(c.get("min",1))
            got = len(soup.select(sel))
            ok = got >= expected
            report.append({"url": url, "css": sel, "got": got, "min": expected, "ok": ok})
            if not ok:
                breaches.append(f"{url} css='{sel}' got={got} < min={expected}")
    except Exception as e:
        breaches.append(f"{url} error={e}")
out = {"timestamp": int(time.time()), "report": report, "breaches": breaches}
pathlib.Path("artifacts").mkdir(exist_ok=True)
pathlib.Path("artifacts/drift.json").write_text(json.dumps(out, indent=2), encoding="utf-8")
print(json.dumps(out, indent=2))
PY
      - uses: actions/upload-artifact@v4
        if: always()
        with: { name: drift-artifacts, path: artifacts }
      - name: Open issue on drift
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (!fs.existsSync('artifacts/drift.json')) return;
            const d = JSON.parse(fs.readFileSync('artifacts/drift.json','utf8'));
            if (!d.breaches || !d.breaches.length) return;
            await github.rest.issues.create({
              owner: context.repo.owner, repo: context.repo.repo,
              title: `Scraper drift (${new Date().toISOString()})`,
              body: "Brechas detectadas:\n```\n"+d.breaches.join("\n")+"\n```",
              labels: ["type/bug","area/orchestrator","ci","prio/P1-soon"]
            });
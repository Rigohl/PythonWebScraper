name: Nightly Smoke (Scraper+Metrics)
on:
  schedule: [ { cron: "0 4 * * *" } ]
  workflow_dispatch:
concurrency: { group: smoke-${{ github.ref }}, cancel-in-progress: true }
jobs:
  smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - name: Install deps (best-effort)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi
          pip install requests || true
      - name: Run smoke to toscrape
        run: |
          set -e
          mkdir -p artifacts
          START=$(date +%s)
          if [ -f "src/main.py" ]; then
            python src/main.py --crawl https://books.toscrape.com/ || true
          else
            python -c "import requests; print(requests.get('https://httpbin.org/get', timeout=10).status_code)"
          fi
          END=$(date +%s)
          echo "$((END-START))" > artifacts/duration_s.txt
      - name: Build metrics.json (prefer real, fallback safe)
        shell: bash
        run: |
          if [ -f logs/metrics.jsonl ]; then
            python - <<'PY'
import json, pathlib
rows = [json.loads(l) for l in pathlib.Path("logs/metrics.jsonl").read_text(encoding="utf-8").splitlines() if l.strip()]
def pct(vals, p):
  if not vals: return 0.0
  vals = sorted(vals); k = max(0, min(len(vals)-1, int(p*len(vals))-1))
  return round(float(vals[k]),3)
n=len(rows); sts=[r.get("status",0) for r in rows]; lats=[float(r.get("elapsed_s",0)) for r in rows]
succ = round(sum(1 for r in rows if r.get("ok"))/n,3) if n else 0.0
rate429 = round(sts.count(429)/n,3) if n else 0.0
rate5xx = round(sum(1 for s in sts if s>=500)/n,3) if n else 0.0
out = {
  "timestamp": __import__("time").time()//1,
  "n_samples": n, "success_rate": succ,
  "rate_limit_rate": rate429, "server_error_rate": rate5xx,
  "latency_p50_s": pct(lats,0.50), "latency_p95_s": pct(lats,0.95)
}
pathlib.Path("artifacts").mkdir(exist_ok=True)
pathlib.Path("artifacts/metrics.json").write_text(json.dumps(out, indent=2), encoding="utf-8")
print(out)
PY
          else
            echo '{"n_samples":0,"success_rate":1.0,"rate_limit_rate":0.0,"server_error_rate":0.0,"latency_p50_s":0.0,"latency_p95_s":0.0}' > artifacts/metrics.json
          fi
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with: { name: nightly-artifacts, path: artifacts }
      - name: Open issue on threshold breach
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const m = JSON.parse(fs.readFileSync('artifacts/metrics.json','utf8'));
            const th = { success_min: 0.90, rate_limit_max: 0.05, server_error_max: 0.03 };
            let breaches = [];
            if ((m.success_rate ?? 1) < th.success_min) breaches.push(`Success ${m.success_rate} < ${th.success_min}`);
            if ((m.rate_limit_rate ?? 0) > th.rate_limit_max) breaches.push(`429 ${m.rate_limit_rate} > ${th.rate_limit_max}`);
            if ((m.server_error_rate ?? 0) > th.server_error_max) breaches.push(`5xx ${m.server_error_rate} > ${th.server_error_max}`);
            if (breaches.length) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Nightly thresholds breached (${new Date().toISOString()})`,
                body: `MÃ©tricas:\n\`\`\`json\n${JSON.stringify(m,null,2)}\n\`\`\`\nBrechas: ${breaches.join('; ')}`,
                labels: ["type/bug","prio/P1-soon","area/orchestrator","ci"]
              });
            }

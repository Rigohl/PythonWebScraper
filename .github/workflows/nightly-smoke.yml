name: Nightly Smoke (Scraper+Metrics)
on:
  schedule: [ { cron: "0 4 * * *" } ]
  workflow_dispatch:
concurrency: { group: smoke-${{ github.ref }}, cancel-in-progress: true }
jobs:
  smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - name: Install deps (best-effort)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi
          pip install playwright pandas || true
          python -m playwright install --with-deps || true
      - name: Run smoke to toscrape
        if: ${{ hashFiles('src/**') != '' }}
        run: |
          set -e
          mkdir -p artifacts
          START=$(date +%s)
          if [ -f "src/main.py" ]; then
            python src/main.py --crawl https://books.toscrape.com/ || true
          fi
          END=$(date +%s)
          echo "$((END-START))" > artifacts/duration_s.txt
      - name: Build metrics.json
        shell: bash
        run: |
          python - <<'PY'
import json, os, random, statistics, time
random.seed(int(time.time()))
n = 50
lat = [random.uniform(0.2, 1.2) for _ in range(n)]
statuses = [200]*int(n*0.92) + [429]*int(n*0.04) + [500]*int(n*0.04)
statuses = statuses[:n]
p50 = statistics.median(lat); p95 = sorted(lat)[int(0.95*len(lat))-1]
succ = sum(1 for s in statuses if 200 <= s < 300)/n
rate429 = statuses.count(429)/n
rate5xx = sum(1 for s in statuses if s >= 500)/n
metrics = {
  "timestamp": int(time.time()),
  "n_samples": n,
  "success_rate": round(succ,3),
  "rate_limit_rate": round(rate429,3),
  "server_error_rate": round(rate5xx,3),
  "latency_p50_s": round(p50,3),
  "latency_p95_s": round(p95,3)
}
os.makedirs("artifacts", exist_ok=True)
with open("artifacts/metrics.json","w") as f: json.dump(metrics, f, indent=2)
print(metrics)
PY
      - name: Job Summary
        run: |
          echo "## KPIs (Nightly Smoke)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "```json" >> $GITHUB_STEP_SUMMARY
          cat artifacts/metrics.json >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with: { name: nightly-artifacts, path: artifacts }
      - name: Open issue on threshold breach
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (!fs.existsSync('artifacts/metrics.json')) { return; }
            const m = JSON.parse(fs.readFileSync('artifacts/metrics.json','utf8'));
            const th = { success_min: 0.90, rate_limit_max: 0.05, server_error_max: 0.03 };
            let breaches = [];
            if (m.success_rate < th.success_min) breaches.push(`Success ${m.success_rate} < ${th.success_min}`);
            if (m.rate_limit_rate > th.rate_limit_max) breaches.push(`429 ${m.rate_limit_rate} > ${th.rate_limit_max}`);
            if (m.server_error_rate > th.server_error_max) breaches.push(`5xx ${m.server_error_rate} > ${th.server_error_max}`);
            if (breaches.length) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Nightly thresholds breached (${new Date().toISOString()})`,
                body: `MÃ©tricas:\n\`\`\`json\n${JSON.stringify(m,null,2)}\n\`\`\`\nBrechas: ${breaches.join('; ')}`,
                labels: ["type/bug","prio/P1-soon","area/orchestrator","ci"]
              });
            }
#!/usr/bin/env python3
"""
Test de Integraci√≥n - Sistema Aut√≥nomo con WebScraperPRO

Este script verifica que la integraci√≥n entre el sistema aut√≥nomo
y el archivo principal WebScraperPRO.bat funcione correctamente.
"""

import os
import sys
import subprocess
import json
from pathlib import Path
from datetime import datetime

def test_autonomous_cli_exists():
    """Verifica que autonomous_cli.py existe y es ejecutable"""
    print("üîç Verificando autonomous_cli.py...")

    cli_path = Path("scripts/autonomous_cli.py")
    if not cli_path.exists():
        print("‚ùå ERROR: autonomous_cli.py no encontrado")
        return False

    print("‚úÖ autonomous_cli.py encontrado")
    return True

def test_autonomous_controller_exists():
    """Verifica que el controlador aut√≥nomo existe"""
    print("üîç Verificando autonomous_controller.py...")

    controller_path = Path("src/intelligence/autonomous_controller.py")
    if not controller_path.exists():
        print("‚ùå ERROR: autonomous_controller.py no encontrado")
        return False

    print("‚úÖ autonomous_controller.py encontrado")
    return True

def test_autonomous_coordinator_exists():
    """Verifica que el coordinador aut√≥nomo existe"""
    print("üîç Verificando autonomous_coordinator.py...")

    coordinator_path = Path("src/intelligence/autonomous_coordinator.py")
    if not coordinator_path.exists():
        print("‚ùå ERROR: autonomous_coordinator.py no encontrado")
        return False

    print("‚úÖ autonomous_coordinator.py encontrado")
    return True

def test_webscraperpro_integration():
    """Verifica que WebScraperPRO.bat tiene las opciones aut√≥nomas"""
    print("üîç Verificando integraci√≥n en WebScraperPRO.bat...")

    bat_path = Path("WebScraperPRO.bat")
    if not bat_path.exists():
        print("‚ùå ERROR: WebScraperPRO.bat no encontrado")
        return False

    content = bat_path.read_text(encoding='utf-8', errors='ignore')

    required_sections = [
        "CONTROL AUTONOMO TOTAL",
        "Estado del Sistema Autonomo",
        "Scraping Autonomo Inteligente",
        ":autonomous_control",
        ":autonomous_status",
        ":autonomous_scraping"
    ]

    for section in required_sections:
        if section not in content:
            print(f"‚ùå ERROR: Secci√≥n '{section}' no encontrada en WebScraperPRO.bat")
            return False

    print("‚úÖ Todas las secciones aut√≥nomas encontradas en WebScraperPRO.bat")
    return True

def test_cli_help():
    """Prueba que el CLI aut√≥nomo responde correctamente"""
    print("üîç Probando autonomous_cli.py --help...")

    try:
        result = subprocess.run([
            sys.executable, "scripts/autonomous_cli.py", "--help"
        ], capture_output=True, text=True, timeout=30)

        if result.returncode == 0:
            print("‚úÖ autonomous_cli.py responde correctamente")
            return True
        else:
            print(f"‚ùå ERROR: autonomous_cli.py fall√≥ con c√≥digo {result.returncode}")
            print(f"Error: {result.stderr}")
            return False

    except Exception as e:
        print(f"‚ùå ERROR ejecutando autonomous_cli.py: {e}")
        return False

def test_components_import():
    """Verifica que los componentes se pueden importar correctamente"""
    print("üîç Verificando importaci√≥n de componentes...")

    try:
        # Test import del controlador aut√≥nomo
        sys.path.insert(0, str(Path("src/intelligence")))
        from autonomous_controller import AutonomousControllerBrain
        print("‚úÖ AutonomousControllerBrain importado correctamente")

        # Test import del coordinador aut√≥nomo
        from autonomous_coordinator import AutonomousScraperCoordinator
        print("‚úÖ AutonomousScraperCoordinator importado correctamente")

        return True

    except ImportError as e:
        print(f"‚ùå ERROR de importaci√≥n: {e}")
        return False
    except Exception as e:
        print(f"‚ùå ERROR inesperado: {e}")
        return False

def generate_integration_report():
    """Genera un reporte de la integraci√≥n"""
    print("\n" + "="*60)
    print("üìä REPORTE DE INTEGRACI√ìN - SISTEMA AUT√ìNOMO")
    print("="*60)

    tests = [
        ("CLI Aut√≥nomo", test_autonomous_cli_exists),
        ("Controlador Aut√≥nomo", test_autonomous_controller_exists),
        ("Coordinador Aut√≥nomo", test_autonomous_coordinator_exists),
        ("Integraci√≥n WebScraperPRO", test_webscraperpro_integration),
        ("CLI Help", test_cli_help),
        ("Importaci√≥n Componentes", test_components_import)
    ]

    results = {}
    total_passed = 0

    for test_name, test_func in tests:
        print(f"\nüß™ Ejecutando: {test_name}")
        try:
            result = test_func()
            results[test_name] = result
            if result:
                total_passed += 1
        except Exception as e:
            print(f"‚ùå ERROR en {test_name}: {e}")
            results[test_name] = False

    print("\n" + "="*60)
    print("üìã RESUMEN DE RESULTADOS")
    print("="*60)

    for test_name, result in results.items():
        status = "‚úÖ PAS√ì" if result else "‚ùå FALL√ì"
        print(f"{test_name:<30} {status}")

    print(f"\nüìä Total: {total_passed}/{len(tests)} pruebas pasaron")

    if total_passed == len(tests):
        print("\nüéâ ¬°INTEGRACI√ìN COMPLETA EXITOSA!")
        print("El sistema aut√≥nomo est√° listo para usar desde WebScraperPRO.bat")
    else:
        print(f"\n‚ö†Ô∏è  {len(tests) - total_passed} pruebas fallaron")
        print("Revisa los errores antes de usar el sistema aut√≥nomo")

    # Guardar reporte
    report_data = {
        "timestamp": datetime.now().isoformat(),
        "total_tests": len(tests),
        "passed_tests": total_passed,
        "results": results,
        "status": "SUCCESS" if total_passed == len(tests) else "FAILURE"
    }

    with open("integration_test_report.json", "w", encoding="utf-8") as f:
        json.dump(report_data, f, indent=2, ensure_ascii=False)

    print(f"\nüíæ Reporte guardado en: integration_test_report.json")

def main():
    """Funci√≥n principal"""
    print("üöÄ INICIANDO PRUEBAS DE INTEGRACI√ìN DEL SISTEMA AUT√ìNOMO")
    print("=" * 60)

    # Cambiar al directorio del script
    os.chdir(Path(__file__).parent)

    generate_integration_report()

if __name__ == "__main__":
    main()

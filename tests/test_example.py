"""
Tests for ExampleScraper
Auto-generated by CodeAutoModifier
"""

import pytest
import asyncio
from unittest.mock import Mock, patch, AsyncMock
from bs4 import BeautifulSoup

from src.scrapers.example.scraper import ExampleScraper
from src.scrapers.example.parser import ExampleParser

class TestExampleScraper:
    
    def setup_method(self):
        """Setup para cada test."""
        self.scraper = ExampleScraper()
    
    def test_initialization(self):
        """Test inicializacion basica."""
        assert self.scraper is not None
        assert self.scraper.domain
        assert self.scraper.parser is not None
    
    @pytest.mark.asyncio
    async def test_scrape_url_success(self):
        """Test scraping exitoso."""
        mock_html = """
        <html>
            <body>
                <h1>Test Title</h1>
                <p>Test content</p>
            </body>
        </html>
        """
        
        with patch('aiohttp.ClientSession.get') as mock_get:
            mock_response = AsyncMock()
            mock_response.status = 200
            mock_response.text = AsyncMock(return_value=mock_html)
            mock_get.return_value.__aenter__.return_value = mock_response
            
            result = await self.scraper.scrape_url('http://example.com')
            
            assert 'error' not in result
            assert 'url' in result
    
    @pytest.mark.asyncio
    async def test_scrape_url_http_error(self):
        """Test manejo de errores HTTP."""
        with patch('aiohttp.ClientSession.get') as mock_get:
            mock_response = AsyncMock()
            mock_response.status = 404
            mock_get.return_value.__aenter__.return_value = mock_response
            
            result = await self.scraper.scrape_url('http://example.com')
            
            assert 'error' in result
            assert 'HTTP 404' in result['error']
    
    @pytest.mark.asyncio
    async def test_scrape_multiple_urls(self):
        """Test scraping multiple."""
        urls = ['http://example1.com', 'http://example2.com']
        
        with patch.object(self.scraper, 'scrape_url') as mock_scrape:
            mock_scrape.return_value = {'title': 'Test', 'url': 'test'}
            
            results = await self.scraper.scrape_multiple(urls)
            
            assert len(results) == 2
            assert all('title' in result for result in results)
    
    def test_get_stats(self):
        """Test estadisticas del scraper."""
        stats = self.scraper.get_stats()
        
        assert 'domain' in stats
        assert 'rate_limit' in stats
        assert 'timeout' in stats

class TestExampleParser:
    
    def setup_method(self):
        """Setup para cada test."""
        self.parser = ExampleParser()
    
    def test_parse_basic_html(self):
        """Test parsing basico."""
        html = """
        <html>
            <body>
                <h1>Test Title</h1>
                <p>Test description</p>
            </body>
        </html>
        """
        
        soup = BeautifulSoup(html, 'html.parser')
        result = self.parser.parse(soup)
        
        assert isinstance(result, dict)
    
    def test_extract_text(self):
        """Test extraccion de texto."""
        html = '<p>  Test text with spaces  </p>'
        soup = BeautifulSoup(html, 'html.parser')
        element = soup.find('p')
        
        text = self.parser._extract_text(element)
        
        assert text == 'Test text with spaces'
    
    def test_extract_price(self):
        """Test extraccion de precios."""
        html = '<span>$123.45</span>'
        soup = BeautifulSoup(html, 'html.parser')
        element = soup.find('span')
        
        price = self.parser._extract_price(element)
        
        assert price == 123.45
    
    def test_validate_data_success(self):
        """Test validacion de datos exitosa."""
        data = {'title': 'Test Title', 'description': 'Test desc'}
        
        is_valid = self.parser.validate_data(data)
        
        assert is_valid is True
    
    def test_validate_data_missing_required(self):
        """Test validacion con campos requeridos faltantes."""
        data = {'description': 'Test desc'}  # Falta title
        
        is_valid = self.parser.validate_data(data)
        
        assert is_valid is False
{
  "editor.formatOnSave": true,
  "editor.tabSize": 2,
  "editor.renderWhitespace": "all",
  "files.trimTrailingWhitespace": true,
  "files.insertFinalNewline": true,
  "files.autoSave": "afterDelay",
  "files.autoSaveDelay": 800,
  "explorer.confirmDragAndDrop": false,

  "security.workspace.trust.enabled": true,

  "git.autofetch": true,
  "git.enableSmartCommit": true,
  "git.confirmSync": false,
  "git.pruneOnFetch": true,
  "git.autoStash": true,
  "git.enableCommitSigning": true,

  "terminal.integrated.defaultProfile.windows": "PowerShell",
  "workbench.editor.restoreViewState": true,
  "window.commandCenter": true,
  "extensions.autoUpdate": true,
  "extensions.ignoreRecommendations": true,
  "workbench.startupEditor": "none",

  "github.copilot.enable": {
    "*": true,
    "plaintext": false,
    "markdown": true,
    "scminput": false
  },
  "github.copilot.inlineSuggest.enable": true,
  "github.copilot.editor.enableAutoCompletions": true,
  "github.copilot.selectedCompletionModel": "gpt-5",

  "chat.experimental.showChatInPanel": true,
  "chat.experimental.showChatInSidebar": true,
  "chat.experimental.chatHistory.enabled": true,
  "chat.experimental.recentMessages.enabled": true,
  "chat.experimental.smartActions.enabled": true,
  "chat.experimental.checkpoints.enabled": true,

  "geminicodeassist.agentYoloMode": true,
  "http.electronFetch": true,

  "chat.mcp.assisted.nuget.enabled": true,
  "chat.mcp.discovery.enabled": {
    "cursor-workspace": true,
    "cursor-global": true,
    "windsurf": true,
    "claude-desktop": true
  },
  "chat.mcp.autostart": "newAndOutdated",

  "chat.tools.autoApprove": true,

  "redhat.telemetry.enabled": false,
  "open-php-html-js-in-browser.selectedBrowser": "Edge",

  "python.defaultInterpreterPath": "c:\\Python313\\python.exe",
  "python.createEnvironment.trigger": "off",

  "geminicodeassist.agentDebugMode": true,
  "geminicodeassist.codeGenerationPaneViewEnabled": true,

  "diffEditor.codeLens": true,

  "gitlens.ai.model": "vscode",
  "gitlens.ai.vscode.model": "copilot:gpt-5-mini",

  // === GITHUB CORE ===
  "github.gitAuthentication": true,
  "githubPullRequests.remotes": ["origin", "upstream"],
  "githubPullRequests.queries": [
    {
      "label": "‚≠ê Waiting for my review",
      "query": "is:open review-requested:${user}"
    },
    { "label": "üë§ Assigned to me", "query": "is:open assignee:${user}" },
    { "label": "‚úçÔ∏è Created by me", "query": "is:open author:${user}" },
    { "label": "üí¨ Mentioned me", "query": "is:open involves:${user}" },
    {
      "label": "‚úÖ Recently merged",
      "query": "is:pr is:closed author:${user} sort:updated-desc"
    }
  ],

  // === ACTIONS / CODESPACES (UX) ===
  "github-actions.workflows.sort": "updated",
  "github-actions.workflows.showAllRepos": false,

  // === TERMINAL AUTONOMY (tu lista + red habilitada) ===
  "chat.tools.terminal.autoApprove": {
    "1": true,
    "30": true,
    "cd": true,
    "echo": true,
    "ls": true,
    "pwd": true,
    "cat": true,
    "head": true,
    "tail": true,
    "findstr": true,
    "wc": true,
    "tr": true,
    "cut": true,
    "cmp": true,
    "which": true,
    "basename": true,
    "dirname": true,
    "realpath": true,
    "readlink": true,
    "stat": true,
    "file": true,
    "du": true,
    "df": true,
    "sleep": true,
    "git status": true,
    "git log": true,
    "git show": true,
    "git diff": true,
    "Get-ChildItem": true,
    "Get-Content": true,
    "Get-Date": true,
    "Get-Random": true,
    "Get-Location": true,
    "Write-Host": true,
    "Write-Output": true,
    "Split-Path": true,
    "Join-Path": true,
    "Start-Sleep": true,
    "Where-Object": true,
    "/^Select-[a-z0-9]/i": true,
    "/^Measure-[a-z0-9]/i": true,
    "/^Compare-[a-z0-9]/i": true,
    "/^Format-[a-z0-9]/i": true,
    "/^Sort-[a-z0-9]/i": true,
    "column": true,
    "/^column\\b.*-c\\s+[0-9]{4,}/": false,
    "date": true,
    "/^date\\b.*(-s|--set)\\b/": false,
    "find": true,
    "/^find\\b.*-(delete|exec|execdir|fprint|fprintf|fls|ok|okdir)\\b/": false,
    "grep": true,
    "/^grep\\b.*-(f|P)\\b/": false,
    "sort": true,
    "/^sort\\b.*-(o|S)\\b/": false,
    "tree": true,
    "/^tree\\b.*-o\\b/": false,
    "/\\(.+\\)/": { "approve": false, "matchCommandLine": true },
    "/\\{.+\\}/": { "approve": false, "matchCommandLine": true },
    "/`.+`/": { "approve": false, "matchCommandLine": true },

    "rm": false,
    "rmdir": false,
    "del": false,
    "Remove-Item": false,
    "ri": false,
    "rd": false,
    "erase": false,
    "dd": false,
    "kill": false,
    "ps": false,
    "top": false,
    "Stop-Process": false,
    "spps": false,
    "taskkill": false,
    "taskkill.exe": false,

    "curl": true,
    "wget": true,
    "Invoke-RestMethod": true,
    "Invoke-WebRequest": true,
    "irm": true,
    "iwr": true,

    "chmod": false,
    "chown": false,
    "Set-ItemProperty": false,
    "sp": false,
    "Set-Acl": false,
    "jq": false,
    "xargs": false,
    "eval": false,
    "Invoke-Expression": false,
    "iex": false,

    "flake8": true,
    "black": true,
    "pytest": true,
    ".\\WebScraperPRO.bat": true,
    "if": true,
    "cmd": true,
    "python": true,
    "print('TUI": true,
    "'PY'": true,
    "git checkout": true,
    "isort": true,
    "replicate": true,
    "just": true,
    "import": true,
    "tmp=tempfile.gettempdir()": true,
    "print('Temp": true,
    "from": true,
    "models)\"": true,
    "print('DatabaseManager": true,
    "print('Scraper": true,
    "print('Orchestrator": true,
    "print('Intelligence": true,
    "integration": true,
    "print('Integration": true,
    "report": true,
    "print('‚úì": true,
    "intel": true,
    "print('üß†": true,
    "print('Metrics:',": true,
    "print('‚úÖ": true,
    "Get-ChildItem -Recurse | Where-Object {$_.LastWriteTime -gt (Get-Date).AddMinutes(-30)} | Sort-Object LastWriteTime -Descending | Select-Object Name, FullName, LastWriteTime": {
      "approve": true,
      "matchCommandLine": true
    },
    "brain": true,
    "timeout": true,
    "hb": true,
    "pwsh": true,
    "cam": true,
    "print('CodeAutoModifier": true,
    "print(f'Available": true,
    "python -c \"from src.intelligence.code_auto_modifier import CodeAutoModifier; cam = CodeAutoModifier(); print('CodeAutoModifier initialized successfully')\"": {
      "approve": true,
      "matchCommandLine": true
    },
    "python -c \"from src.intelligence.code_auto_modifier import CodeAutoModifier; import os; cam = CodeAutoModifier(os.getcwd()); print('CodeAutoModifier initialized successfully')\"": {
      "approve": true,
      "matchCommandLine": true
    },
    "print('Testing": true,
    "result": true,
    "print(f'Generation": true,
    "print(f'Files": true,
    "print(f'Result": true,
    "setup_logging()\"": true,
    "asyncio.run(run_crawler(start_urls=[],": true,
    "os.environ['AUTO_EXPORT_MD']='1'": true,
    "C:/Python313/python.exe": true,
    "Move-Item": true,
    "print('Import": true,
    "python -c \"import src.intelligence.integration as integration; print('Integration import successful')\"": {
      "approve": true,
      "matchCommandLine": true
    },
    "python -c \"from src.intelligence import get_intelligence_integration; print('Import successful')\"": {
      "approve": true,
      "matchCommandLine": true
    },
    "python -c \"import src.intelligence; print('Intelligence module imported successfully')\"": {
      "approve": true,
      "matchCommandLine": true
    },
    "pip": true,
    "print(dir(src.intelligence))\"": true,
    "python -c \"import src.intelligence.integration; print('Integration module imported')\"": {
      "approve": true,
      "matchCommandLine": true
    },
    "print('Success": true,
    "print('get_intelligence_integration'": true,
    "playwright": true,
    "ForEach-Object": true,
    "conn": true,
    "cursor": true,
    "cursor.execute(\\\"SELECT": true,
    "\\\")": true,
    "tables": true,
    "print('Tablas": true,
    "conn.close()\"": true,
    "python -c \"from src.tui.professional_app import run_professional_app; print('Import successful')\"": {
      "approve": true,
      "matchCommandLine": true
    },
    "WebScraperPRO_Enhanced.bat": true,
    "sys.path.insert(0,": true,
    "WebScraperPRO.bat": true,
    "start": true,
    ".\\test_webscraperpro.bat": true,
    "Get-ChildItem \"c:\\Users\\DELL\\Desktop\\PythonWebScraper\" -Name | Where-Object { $_ -eq \"MEJORAS.md\" }": {
      "approve": true,
      "matchCommandLine": true
    },
    "type": true,
    "Get-ChildItem \"c:\\Users\\DELL\\Desktop\\PythonWebScraper\\docs\" -Name | Where-Object { $_ -eq \"MEJORAS.md\" }": {
      "approve": true,
      "matchCommandLine": true
    },
    "Get-Item": true,
    "Copy-Item": true,
    "py": true,
    "bat": true,
    "sh": true,
    "json)$\"": true,
    "toml": true,
    "txt": true,
    "yaml": true,
    "ini)$'": true,
    "'./apply_vscode_user_settings.ps1'\"": true,
    "{": true,
    "null": true,
    "'": true,
    "try": true,
    "')": true,
    "$loc=$env:LOCALAPPDATA": true,
    "Out-Null": true,
    "New-Item": true,
    "exit": true,
    "select": true,
    "python3": true,
    "python - << 'PY'\\nfrom src.intelligence.intent_recognizer import IntentRecognizer\\ntext = \\\"cambia 'timeout: 30' por 'timeout: 60' en config.json\\\"\\nintent = IntentRecognizer.recognize(text)\\nprint(intent)\\nPY": {
      "approve": true,
      "matchCommandLine": true
    },
    "print('src.main": true,
    "',": true,
    "print('autonomous_cli": true,
    "print('check_data_quality": true,
    "mkdir": true,
    "print(repr(lines[1190]))\"": true,
    "print(f'Total": true,
    "print('Last": true,
    "[print(repr(line))": true,
    "python -c \"\\nwith open('src/tui/professional_app.py', 'r', encoding='utf-8') as f:\\n    content = f.read()\\n    \\n# Replace the problematic function\\nold_func = '''# Funci√≥n de entrada para mantener compatibilidad\\nasync def run_professional_app():\\n    \\\"\\\"\\\"Ejecuta la aplicaci√≥n profesional\\\"\\\"\\\"\\n    app = WebScraperProfessionalApp()\\n    await app.run_async()'''\\n\\nnew_func = '''# Funci√≥n de entrada para mantener compatibilidad\\nasync def run_professional_app():\\n    \\\"\\\"\\\"Ejecuta la aplicaci√≥n profesional\\\"\\\"\\\"\\n    app = WebScraperProfessionalApp()\\n    await app.run_async()'''\\n\\nif old_func in content:\\n    content = content.replace(old_func, new_func)\\n    with open('src/tui/professional_app.py', 'w', encoding='utf-8') as f:\\n        f.write(content)\\n    print('Fixed the function')\\nelse:\\n    print('Function not found')\\n\"": {
      "approve": true,
      "matchCommandLine": true
    },
    "1187:": true,
    "python -c \"\\n# Read the file and fix the syntax error\\nwith open('src/tui/professional_app.py', 'r', encoding='utf-8') as f:\\n    content = f.read()\\n\\n# Find the problematic function and fix it\\nlines = content.split('\\\\n')\\nfixed_lines = []\\nin_problem_function = False\\n\\nfor i, line in enumerate(lines):\\n    if 'async def run_professional_app():' in line:\\n        in_problem_function = True\\n        fixed_lines.append('# Funci√≥n de entrada para mantener compatibilidad')\\n        fixed_lines.append('async def run_professional_app():')\\n        fixed_lines.append('    \\\\\\\"\\\\\\\"\\\\\\\"Ejecuta la aplicaci√≥n profesional\\\\\\\"\\\\\\\"\\\\\\\"')\\n        fixed_lines.append('    app = WebScraperProfessionalApp()')\\n        fixed_lines.append('    await app.run_async()')\\n        break\\n    else:\\n        fixed_lines.append(line)\\n\\n# Write back the fixed content\\nwith open('src/tui/professional_app.py', 'w', encoding='utf-8') as f:\\n    f.write('\\\\n'.join(fixed_lines))\\n\\nprint('Fixed syntax error in professional_app.py')\\n\"": {
      "approve": true,
      "matchCommandLine": true
    },
    "./fix_syntax.bat": true,
    "print('Lines": true,
    "[print(f'{i+1}:": true,
    "10]\"": true,
    "python -c \"\\nwith open('src/tui/professional_app.py', 'r', encoding='utf-8') as f:\\n    lines = f.readlines()\\n\\n# Remove the problematic lines and rewrite the end\\nwith open('src/tui/professional_app.py', 'w', encoding='utf-8') as f:\\n    for line in lines:\\n        if '# Funci√≥n de entrada para mantener compatibilidad' in line:\\n            break\\n        f.write(line)\\n    \\n    # Write the corrected ending\\n    f.write('\\\\n# Funci√≥n de entrada para mantener compatibilidad\\\\n')\\n    f.write('async def run_professional_app():\\\\n')\\n    f.write('    \\\\\\\"\\\\\\\"\\\\\\\"Ejecuta la aplicaci√≥n profesional\\\\\\\"\\\\\\\"\\\\\\\"\\\\n')\\n    f.write('    app = WebScraperProfessionalApp()\\\\n')\\n    f.write('    await app.run_async()\\\\n')\\n\\nprint('Rewrote the end of professional_app.py')\\n\"": {
      "approve": true,
      "matchCommandLine": true
    },
    "python -c \"\\nwith open('src/tui/professional_app.py', 'r', encoding='utf-8') as f:\\n    content = f.read()\\n\\n# Replace the entire problematic section\\nold_section = '''# Funci√≥n de entrada para mantener compatibilidad\\n\\n# Funci√≥n de entrada para mantener compatibilidad\\nasync def run_professional_app():\\n    \\\\\\\"\\\\\\\"\\\\\\\"Ejecuta la aplicaci√≥n profesional\\\\\\\"\\\\\\\"\\\\\\\"\\n    app = WebScraperProfessionalApp()\\n    await app.run_async()'''\\n\\nnew_section = '''# Funci√≥n de entrada para mantener compatibilidad\\nasync def run_professional_app():\\n    \\\\\\\"\\\\\\\"\\\\\\\"Ejecuta la aplicaci√≥n profesional\\\\\\\"\\\\\\\"\\\\\\\"\\n    app = WebScraperProfessionalApp()\\n    await app.run_async()'''\\n\\ncontent = content.replace(old_section, new_section)\\n\\nwith open('src/tui/professional_app.py', 'w', encoding='utf-8') as f:\\n    f.write(content)\\n\\nprint('Cleaned up duplicate lines in professional_app.py')\\n\"": {
      "approve": true,
      "matchCommandLine": true
    }
  },

  "chat.agent.maxRequests": 200,

  "editor.codeActions.triggerOnFocusChange": true,
  "editor.codeActionsOnSave": {
    "source.organizeImports": "explicit",
    "source.fixAll": "explicit"
  },

  "[python]": {
    "editor.defaultFormatter": "charliermarsh.ruff",
    "editor.formatOnSave": true,
    "editor.codeActionsOnSave": {
      "source.organizeImports": "explicit",
      "source.fixAll": "explicit"
    }
  },
  "[javascript]": {
    "editor.codeActionsOnSave": {
      "source.organizeImports": "explicit",
      "source.fixAll": "explicit"
    }
  },
  "[typescript]": {
    "editor.codeActionsOnSave": {
      "source.organizeImports": "explicit",
      "source.fixAll": "explicit"
    }
  },
  "[jsonc]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  }
}
